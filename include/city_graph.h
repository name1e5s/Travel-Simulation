#ifndef CITY_GRAPH
#define CITY_GRAPH
// Basic definitions
#define MAX_VERT 50
#define INFTY 0x3f3f3f3f

#include <string>
#include <map>
#include <vector>

using std::string;
using std::map;
using std::vector;

// Define the type of the trips.
typedef enum {TYPE_TRAIN, TYPE_FLIGHT, TYPE_BUS } transport_t;

// Record the basic information of a public transport.
// Usually used as an edge of the adjacent list in out graph.
struct Transport {
    Transport() {
        tran_name = "";
        tran_type = TYPE_TRAIN;
        source_city = 0;
        dest_city = 0;
        start_time = 0;
        duration = 0;
        price = 0;
        next_transport = nullptr;
    }

    Transport(const Transport& transport) {
        tran_name = transport.tran_name;
        tran_type = transport.tran_type;
        source_city = transport.source_city;
        dest_city = transport.dest_city;
        start_time = transport.start_time;
        duration = transport.duration;
        price = transport.price;
        next_transport = nullptr;
    }

    Transport(string name, transport_t type, int source, int dest, int start, int duration, int price) {
        this->tran_name = name;
        this->tran_type = type;
        this->source_city = source;
        this->dest_city = dest;
        this->start_time = start;
        this->duration = duration;
        this->price = price;
        this->next_transport = nullptr;
    }

    string tran_name;
    transport_t tran_type;
    int source_city, dest_city;
    // Note: in out system, we use hours.
    int start_time, duration;
    // All integer price, "xxx.5" will be "xxx".
    int price;

    Transport* next_transport;
};

// Record the city name and transports start from
// this city. Usually as a vertex of the graph.
struct City {
    string city_name;
    Transport *first_transport;
};

// The City Graph. Records ALL the useful data.
class CityGraph {
public:
    CityGraph();
    ~CityGraph();
    void print_edge(); // For debug
    map<int, string> index_city;
    map<string, int> city_index;
private:
    void init(const char* path = "/home/name1e5s/travel.dat");
    void add_edge(string, transport_t, int, int, int, int, int);
    int find_city(string);
    void floyd(void);

    City city[MAX_VERT];
    int city_num;

    // To find the cheapest route.
    // In our program, the cheapest route between
    // ANY two cities will be pre-generated by FLOYD
    // algorithm. Obviously, the time complexity will be
    // $O(n^3)$
    int cheapest_price[MAX_VERT][MAX_VERT];
    vector<Transport> cheapest_route[MAX_VERT][MAX_VERT];


};
#endif